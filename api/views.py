from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import *
from .serializers import *
import requests


# üîê –¢–æ–∫–µ–Ω –∏ —á–∞—Ç –∞–π–¥–∏ Telegram
Token = '8287861784:AAEQWmQkQesRGlH4cg-zG59saTBD8NukkDA'
Chat_id = '-1003087039414'


# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
@api_view(['POST'])
def send_message(request):
    email = request.data.get('email', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    phone = request.data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')

    message = (
        f'üì© –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n'
        f'üìß Email: {email}\n'
        f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}'
    )

    url = f'https://api.telegram.org/bot{Token}/sendMessage'
    payload = {'chat_id': Chat_id, 'text': message}

    response = requests.post(url, data=payload)

    if response.status_code == 200:
        return Response({'status': 'success', 'message': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram ‚úÖ'})
    else:
        return Response({'status': 'error', 'details': response.text})


# üì∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã)
@api_view(['GET'])
def get_posts(request):
    posts = Post.objects.all()
    serializer = PostSerializer(posts, many=True)
    return Response(serializer.data)


# üí° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ("–û –Ω–∞—Å" ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
@api_view(['GET'])
def get_about(request):
    about = About.objects.all()
    serializer = AboutSerializer(about, many=True)
    return Response(serializer.data)

@api_view(['GET'])
def get_projects(request):
    projects = Project.objects.all()
    serializer = ProjectSerializer(projects, many=True)
    return Response(serializer.data)


@api_view(['POST'])
def create_consultation(request):
    serializer = ConsultationSerializer(data=request.data)
    if serializer.is_valid():
        consultation = serializer.save()

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        message = (
            f'üì¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n'
            f'üë§ –ò–º—è: {consultation.name}\n'
            f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {consultation.phone}\n'
            f'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {consultation.message}'
        )

        url = f'https://api.telegram.org/bot{Token}/sendMessage'
        payload = {'chat_id': Chat_id, 'text': message}
        requests.post(url, data=payload)

        return Response({'status': 'success', 'message': '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram ‚úÖ'})
    else:
        return Response({'status': 'error', 'errors': serializer.errors})

@api_view(['GET'])
def get_tools(request):
    tools = Tool.objects.all()
    serializer = ToolSerializer(tools, many=True)
    return Response(serializer.data)

@api_view(['GET'])
def get_reviews(request):
    reviews = Review.objects.all()
    serializer = ReviewSerializer(reviews, many=True)
    return Response(serializer.data)